{"componentChunkName":"component---packages-blog-core-src-templates-post-js","path":"/how-to-implement-conditional-rendering-in-react-js-application/","result":{"data":{"post":{"__typename":"ContentfulArticleProxy","id":"d3f8e9a3-6d65-5bab-9433-d74c2c969059","title":"How to implement conditional rendering in React JS application","slug":"/how-to-implement-conditional-rendering-in-react-js-application/","link":null,"excerpt":"Conditional Rendering Using React JS In this article, we are going to examine multiple ways toâ€¦","timeToRead":2,"featured":null,"thumbnailText":"Conditional Rendering","date":null,"category":{"__typename":"ContentfulCategoryProxy","id":"57b50ff9-12dc-506d-a31f-4df2962dccb3","name":"React","slug":"/category/react/","color":"#00D8FE","icon":"//images.ctfassets.net/yytn7c23rcp1/4A9oCE28RPS4oWARSWgHjo/5219c74bd722934cf386c011077c0c9a/react.svg"},"author":{"__typename":"ContentfulAuthorProxy","id":"8d20b239-2019-5ff7-b42d-95204110e2bd","name":"Nikola Grujicic","slug":"/author/nikola-grujicic/","title":"Main Publisher","description":"Passionate Software Developer with a wish to share his knowledge and introduce other people in to the world of programming.","skills":null,"social":null,"thumbnail":{"__typename":"ContentfulAsset","regular":{"width":150,"height":150,"src":"//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=150&h=150&q=50&fit=fill&f=top","srcSet":"//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=150&h=150&q=50&fit=fill&f=top 1x,\n//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=225&h=225&q=50&fit=fill&f=top 1.5x,\n//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=300&h=300&q=50&fit=fill&f=top 2x"}}},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"conditional-rendering-using-react-js\"\n  }, \"Conditional Rendering Using React JS\"), mdx(\"p\", null, \"In this article, we are going to examine multiple ways to implement \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"conditional rendering in React applications\"), \".\"), mdx(\"p\", null, \"Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"else\"), \" or the conditional operator to create elements representing the current state, and let React update the UI to match them.\"), mdx(\"h2\", {\n    \"id\": \"conditional-rendering-using-the-if-statement\"\n  }, \"Conditional Rendering Using the if statement\"), mdx(\"p\", null, \"Using if statements would be the simplest way to implement \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"conditional rendering\"), \" in React JS.\"), mdx(\"p\", null, \"Let\\u2019s take a look at this example where we show a welcome message to the user if he is logged in \\uD83D\\uDD0D\\uD83D\\uDC40\"), mdx(\"p\", null, \"First, let\\u2019s create two functional components, one component returns the message \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u201CHello world\\u201D\"), \" and the other \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\u201CWelcome user 007\\u201D\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const HelloWorld = (props) => {\\n  return <h1>Hello world!</h1>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const WelcomeMessage = (props) => {\\n  return <h1>Welcome user 007.</h1>;\\n}\\n\")), mdx(\"p\", null, \"Now let\\u2019s create a third \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"functional component\"), \" that takes in the two previous components and using an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" statement we are going to check if the user is logged in or not and return the corresponding message.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const IsUserLoggedIn = (props) => {\\n  const isLoggedIn = props.isLoggedIn;\\n  if (isLoggedIn) {\\n    return <HelloWorld />;\\n  }\\n  return <WelcomeMessage />;\\n}\\n\\nReactDOM.render(\\n  <IsUserLoggedIn isLoggedIn={false} />,\\n  document.getElementById('root')\\n);\\n\")), mdx(\"a\", {\n    target: \"_blank\",\n    href: \"https://codepen.io/nikolagrujicic/pen/RwRMzBB\",\n    className: \"embedly-card\",\n    \"data-card-width\": \"100%\",\n    \"data-card-controls\": \"0\"\n  }, mdx(\"h3\", {\n    style: {\n      \"color\": \"#667eea\"\n    }\n  }, \"Try it on CodePen\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"switch-case-conditional-rendering\"\n  }, \"Switch Case Conditional Rendering\"), mdx(\"p\", null, \"The next thing we are gonna cover is how to do \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"conditional rendering using the switch case\"), \".\"), mdx(\"p\", null, \"There are a couple of reasons you might prefer to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"switch case\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You are comparing multiple possible conditions of an expression and the expression itself is non-trivial.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You have multiple values that may require the same code.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You have some values that will require essentially all of another value\\u2019s execution, plus only a few statements.\")), mdx(\"p\", null, \"For the next example let\\u2019s create an error component that takes in a string value and returns an error message based on the value of the props we pass.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const ErrorHandler = (props) => {\\n  const error = props.error;\\n  switch (error) {\\n    case 'error1':\\n      return 'this is error 1';\\n    case 'error2':\\n      return 'this is error 2';\\n    case 'error3':\\n      return 'this is error 3';\\n    default:\\n      return null;\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"a-target_blank-hrefhttpscodepenionikolagrujicicpenjorxmxv-classembedly-card-data-card-width100-data-card-controls0h3-stylecolor667eeatry-it-on-codepenh3a\"\n  }, mdx(\"a\", {\n    target: \"_blank\",\n    href: \"https://codepen.io/nikolagrujicic/pen/jOrxmXv\",\n    className: \"embedly-card\",\n    \"data-card-width\": \"100%\",\n    \"data-card-controls\": \"0\"\n  }, mdx(\"h3\", {\n    style: {\n      \"color\": \"#667eea\"\n    }\n  }, \"Try it on CodePen\"))), mdx(\"h2\", {\n    \"id\": \"conditional-rendering-using-element-variables\"\n  }, \"Conditional Rendering Using Element Variables\"), mdx(\"p\", null, \"Element variables are simply variables that hold JSX elements. By using variables to store components or some values we can render a part of the component while the rest of the output doesn\\u2019t change.\"), mdx(\"p\", null, \"Let\\u2019s take a look at the following code so that you can understand what I mean.\\uD83D\\uDD0D\\uD83D\\uDC40\"), mdx(\"p\", null, \"Here we are using the two previously created \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"functional components\"), \", we are gonna assign one of them to a variable depending on the value we get from the props we pass to the IsUserLoggedIn component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const IsUserLoggedIn = (props) => {\\n  const isLoggedIn = props.isLoggedIn;\\n  let loggedIn = '';\\n  if (isLoggedIn === false) {\\n    loggedIn = <HelloWorld />;\\n  }\\n  if (isLoggedIn === true) {\\n    loggedIn = <WelcomeMessage />;\\n  }\\n  return loggedIn;\\n}\\n\\nReactDOM.render(\\n  <IsUserLoggedIn isLoggedIn={true} />,\\n  document.getElementById('root')\\n);\\n\")), mdx(\"a\", {\n    target: \"_blank\",\n    href: \"https://codepen.io/nikolagrujicic/pen/abZaQQe\",\n    className: \"embedly-card\",\n    \"data-card-width\": \"100%\",\n    \"data-card-controls\": \"0\"\n  }, mdx(\"h3\", {\n    style: {\n      \"color\": \"#667eea\"\n    }\n  }, \"Try it on CodePen\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"ternary-operators\"\n  }, \"Ternary Operators\"), mdx(\"p\", null, \"It\\u2019s true that we can use JavaScript in JSX, but it becomes difficult when using statements like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"else\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"switch case\"), \" within JSX. There is no real way to inline it.\"), mdx(\"p\", null, \"If you are familiar with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ternary operators\"), \", then you are aware that it is simply a more concise way to write an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \" statement. Thus we have:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const IsUserLoggedIn = (props) => {\\n  const isLoggedIn = props.isLoggedIn;\\n  return (\\n    <div>\\n      {isLoggedIn ? (\\n        \\\"Your are logged in!\\\"\\n      ) : (\\n        \\\"Your are logged out!\\\"\\n      )}\\n    </div>\\n  );\\n}\\n\\nReactDOM.render(\\n  <IsUserLoggedIn isLoggedIn={false} />,\\n  document.getElementById('root')\\n);\\n\")), mdx(\"a\", {\n    target: \"_blank\",\n    href: \"https://codepen.io/nikolagrujicic/pen/WNxaeRb\",\n    className: \"embedly-card\",\n    \"data-card-width\": \"100%\",\n    \"data-card-controls\": \"0\"\n  }, mdx(\"h3\", {\n    style: {\n      \"color\": \"#667eea\"\n    }\n  }, \"Try it on CodePen\")), mdx(\"p\", null, \"The parentheses () around both implicit return statements in the ternary operator enable you to return single or multiple HTML elements or React components from there. If it\\u2019s just a single element though, you can omit the parentheses.\"), mdx(\"p\", null, \"The ternary operation makes the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"conditional rendering\"), \" in React not only more concise but gives you an easy way to inline the conditional rendering in your return. This way, only one part of your JSX is conditionally rendered, while other parts can stay intact without any condition.\"), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"logical--conditional-rendering\"\n  }, \"Logical && Conditional Rendering\"), mdx(\"p\", null, \"The logical \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&&\"), \" operator helps you to make conditions that would return null more concise. In JavaScript, a true && \\u2018Loading\\u2026\\u2019 always evaluates to \\u2018Loading\\u2026\\u2018.\"), mdx(\"p\", null, \"Let\\u2019s take a look at our next example where we display \\u2018Loading\\u2026\\u2019 if the isLoading props is equal to true or \\u2018Hello world!\\u2019 if it is false: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const HelloWorld = (props) => {\\n  const isLoading = props.isLoading;\\n  return (\\n    <div>\\n      {!isLoading && \\\"Hello world!\\\"}\\n      {isLoading && \\\"Loading...\\\"}\\n    </div>\\n  );\\n}\\n\\nReactDOM.render(\\n  <HelloWorld isLoading={true} />,\\n  document.getElementById('root')\\n);\\n\")), mdx(\"a\", {\n    target: \"_blank\",\n    href: \"https://codepen.io/nikolagrujicic/pen/pobxjJr\",\n    className: \"embedly-card\",\n    \"data-card-width\": \"100%\",\n    \"data-card-controls\": \"0\"\n  }, mdx(\"h3\", {\n    style: {\n      \"color\": \"#667eea\"\n    }\n  }, \"Try it on CodePen\")), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I hope this React tutorial was helpful for you to learn about conditional renderings. If you liked it, please share it with your friends.\")));\n}\n;\nMDXContent.isMDXComponent = true;","keywords":null,"tags":null,"thumbnail":null},"categoryPosts":{"nodes":[]},"previous":null,"next":null},"pageContext":{"id":"d3f8e9a3-6d65-5bab-9433-d74c2c969059","categoryId":"57b50ff9-12dc-506d-a31f-4df2962dccb3","tagsIds":[],"hasTags":false,"paginatePostsPage":true,"basePath":"/","services":{"algolia":true,"mailchimp":false,"disqus":false},"siteUrl":null,"mobileMenu":{"title":"Topics","items":[{"name":"React","slug":"/category/react/"}]}}},"staticQueryHashes":["2609647591","620128445","620128445"]}