{"componentChunkName":"component---packages-blog-core-src-templates-post-js","path":"/how-to-implement-conditional-rendering-in-react-js-application/","result":{"data":{"post":{"__typename":"ContentfulArticleProxy","id":"d3f8e9a3-6d65-5bab-9433-d74c2c969059","title":"How to implement conditional rendering in React JS application","slug":"/how-to-implement-conditional-rendering-in-react-js-application/","link":null,"excerpt":"Conditional Rendering Using React JS In this article, we examine multiple ways to implementâ€¦","timeToRead":2,"featured":null,"thumbnailText":"Conditional Rendering","date":null,"category":{"__typename":"ContentfulCategoryProxy","id":"57b50ff9-12dc-506d-a31f-4df2962dccb3","name":"React","slug":"/category/react/","color":"#00D8FE","icon":"//images.ctfassets.net/yytn7c23rcp1/4A9oCE28RPS4oWARSWgHjo/5219c74bd722934cf386c011077c0c9a/react.svg"},"author":{"__typename":"ContentfulAuthorProxy","id":"8d20b239-2019-5ff7-b42d-95204110e2bd","name":"Nikola Grujicic","slug":"/author/nikola-grujicic/","title":"Main Publisher","description":"Passionate Software Developer with a wish to share his knowledge and introduce other people in to the world of programming.","skills":null,"social":null,"thumbnail":{"__typename":"ContentfulAsset","regular":{"width":150,"height":150,"src":"//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=150&h=150&q=50&fit=fill&f=top","srcSet":"//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=150&h=150&q=50&fit=fill&f=top 1x,\n//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=225&h=225&q=50&fit=fill&f=top 1.5x,\n//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=300&h=300&q=50&fit=fill&f=top 2x"}}},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"conditional-rendering-using-react-js\"\n  }, \"Conditional Rendering Using React JS\"), mdx(\"p\", null, \"In this article, we examine multiple ways to implement conditional rendering in React applications.\"), mdx(\"p\", null, \"Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"if\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"else\"), \" or the conditional operator to create elements representing the current state, and let React update the UI to match them.\"), mdx(\"h3\", {\n    \"id\": \"conditional-rendering-using-ifelse\"\n  }, \"Conditional Rendering Using if/else\"), mdx(\"p\", null, \"Using if/else statements would be the simpelest way to implement conditional redering in React JS.\"), mdx(\"p\", null, \"Lets take a look at this simple example where we show a welcome message to the user if he is logged in \\uD83D\\uDD0D\\uD83D\\uDC40\"), mdx(\"p\", null, \"First let\\u2019s create two components, one component returns the message \\u201CHello world\\u201D and the other \\u201CWelcome user 007\\u201D\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const HelloWorld = (props) => {\\n  return <h1>Hello world!</h1>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const WelcomeMessage = (props) => {\\n  return <h1>Welcome user 007.</h1>;\\n}\\n\")), mdx(\"p\", null, \"Now we are gonna create a third component that takes in the two previous components and using an if statement we are going to check if the user is logged in or not and return the corensponding message.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const IsUserLoggedIn = (props) => {\\n  const isLoggedIn = props.isLoggedIn;\\n  if (isLoggedIn) {\\n    return <HelloWorld />;\\n  }\\n  return <WelcomeMessage />;\\n}\\n\\nReactDOM.render(\\n  <IsUserLoggedIn isLoggedIn={false} />,\\n  document.getElementById('root')\\n);\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codepen.io/nikolagrujicic/pen/RwRMzBB\"\n  }), \"Try it on CodePen\")), mdx(\"h3\", {\n    \"id\": \"switch-case-conditional-rendering\"\n  }, \"Switch Case Conditional Rendering\"), mdx(\"p\", null, \"When starting a Gatsby project, it\\u2019s always a great idea to look for available plugins that can make your job easier! Fortunately, the Gatsby website provides a huge searchable library that\\u2019s packed full of official plugins we can use.\"), mdx(\"p\", null, \"Go ahead and open that link in a new tab, and scroll down through some of the available plugins. They\\u2019re sorted by popularity, so you will get a good idea of what other folks are regularly using. You can also make use of the search bar, of course! \\uD83D\\uDD0D\\uD83D\\uDC40\"), mdx(\"h3\", {\n    \"id\": \"conditional-rendering-using-element-variables\"\n  }, \"Conditional Rendering Using Element Variables\"), mdx(\"p\", null, \"When starting a Gatsby project, it\\u2019s always a great idea to look for available plugins that can make your job easier! Fortunately, the Gatsby website provides a huge searchable library that\\u2019s packed full of official plugins we can use.\"), mdx(\"p\", null, \"Go ahead and open that link in a new tab, and scroll down through some of the available plugins. They\\u2019re sorted by popularity, so you will get a good idea of what other folks are regularly using. You can also make use of the search bar, of course! \\uD83D\\uDD0D\\uD83D\\uDC40\"), mdx(\"h3\", {\n    \"id\": \"ternary-operators\"\n  }, \"Ternary Operators\"), mdx(\"p\", null, \"When starting a Gatsby project, it\\u2019s always a great idea to look for available plugins that can make your job easier! Fortunately, the Gatsby website provides a huge searchable library that\\u2019s packed full of official plugins we can use.\"), mdx(\"p\", null, \"Go ahead and open that link in a new tab, and scroll down through some of the available plugins. They\\u2019re sorted by popularity, so you will get a good idea of what other folks are regularly using. You can also make use of the search bar, of course! \\uD83D\\uDD0D\\uD83D\\uDC40\"), mdx(\"h3\", {\n    \"id\": \"logical--conditional-rendering\"\n  }, \"Logical && Conditional Rendering\"), mdx(\"p\", null, \"Specific plugin installation instructions can be found within each plugin\\u2019s page in the Gatsby plugin library, and you should always start there for best results. But in general, installing plugins in Gatsby is an easy two-step process!\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1. Install plugin file(s)\"), \"\\nSince these official Gatsby plugins are all Node.js packages, we can just install them by using npm install or yarn add. For example, we could install the gatsby-source-filesystem plugin like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { createFilePath } = require(`gatsby-source-filesystem`)\\n\\nexports.onCreateNode = ({ node, getNode, actions }) => {\\n  const { createNodeField } = actions\\n  // Ensures we are processing only markdown files\\n  if (node.internal.type === \\\"MarkdownRemark\\\") {\\n    // Use `createFilePath` to turn markdown files in our `data/faqs` directory into `/faqs/slug`\\n    const relativeFilePath = createFilePath({\\n      node,\\n      getNode,\\n      basePath: \\\"data/faqs/\\\",\\n    })\\n  }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","keywords":null,"tags":null,"thumbnail":null},"categoryPosts":{"nodes":[{"__typename":"ContentfulArticleProxy","id":"45bd02d8-7080-5f75-a5a6-4f5dbbc17346","title":"React redux-form dispatch","slug":"/react-redux-form-dispatch/","link":null,"excerpt":"React Hooks Tutorial Hello world!","timeToRead":1,"featured":null,"thumbnailText":"React Hooks Tutorial","date":null,"category":{"__typename":"ContentfulCategoryProxy","id":"57b50ff9-12dc-506d-a31f-4df2962dccb3","name":"React","slug":"/category/react/","color":"#00D8FE","icon":"//images.ctfassets.net/yytn7c23rcp1/4A9oCE28RPS4oWARSWgHjo/5219c74bd722934cf386c011077c0c9a/react.svg"},"author":{"__typename":"ContentfulAuthorProxy","id":"8d20b239-2019-5ff7-b42d-95204110e2bd","name":"Nikola Grujicic","slug":"/author/nikola-grujicic/","title":"Main Publisher","description":"Passionate Software Developer with a wish to share his knowledge and introduce other people in to the world of programming.","skills":null,"social":null,"thumbnail":{"__typename":"ContentfulAsset","regular":{"width":150,"height":150,"src":"//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=150&h=150&q=50&fit=fill&f=top","srcSet":"//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=150&h=150&q=50&fit=fill&f=top 1x,\n//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=225&h=225&q=50&fit=fill&f=top 1.5x,\n//images.ctfassets.net/yytn7c23rcp1/1k1YTqHdpSJVhqKBuZQ9lA/951386721320e9913c8bbb01effdea15/235-0-2.png?w=300&h=300&q=50&fit=fill&f=top 2x"}}},"thumbnail":null}]},"previous":{"__typename":"ContentfulArticleProxy","id":"45bd02d8-7080-5f75-a5a6-4f5dbbc17346","slug":"/react-redux-form-dispatch/","title":"React redux-form dispatch"},"next":null},"pageContext":{"id":"d3f8e9a3-6d65-5bab-9433-d74c2c969059","categoryId":"57b50ff9-12dc-506d-a31f-4df2962dccb3","tagsIds":[],"hasTags":false,"previousId":"45bd02d8-7080-5f75-a5a6-4f5dbbc17346","paginatePostsPage":true,"basePath":"/","services":{"algolia":true,"mailchimp":false,"disqus":false},"siteUrl":null,"mobileMenu":{"title":"Topics","items":[{"name":"React","slug":"/category/react/"}]}}},"staticQueryHashes":["2609647591","620128445","620128445"]}